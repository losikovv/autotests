task AutoMRCheck(type: Test) {
    dependsOn(':api:autoMr')
    dependsOn(':reforged:autoMr')
}

task allureCopyHistoryDir(type: Copy) {
    sleep(5000)
    from project(':api').getBuildDir().path+"/allure-results".toString()
    from project(':reforged').getBuildDir().path+"/allure-results".toString()
    duplicatesStrategy = DuplicatesStrategy.WARN
    into "build/allure-results/"
}

task ciRun(type: Test) {
    def CI_MODULE = System.getenv('CI_MODULE')

    switch (CI_MODULE) {
        case 'ui-stf': dependsOn(':reforged:sbermarketUiCustom')
            break
        case 'ui-b2b': dependsOn(':reforged:businessUiCustom')
            break
        case 'ui-admin': dependsOn(':reforged:adminUiCustom')
            break
        case 'ui-partners': dependsOn(':reforged:partnersUiCustom')
            break
        case 'api': dependsOn(':api:ciRunApi')
            break
        case 'grpc': dependsOn(':grpc:ciRunGrpc')
            break
        default:  println('U miss ci_module')
            break
    }
}

task copyAllAllureHistory(type: Copy) {
    sleep(5000)
    def paths = []
    subprojects.each {
        paths += it.getBuildDir().path + "/allure-results".toString()
    }
    from paths
    duplicatesStrategy = DuplicatesStrategy.WARN
    into "build/allure-results/"
}

task copyAllLogs(type: Copy) {
    sleep(5000)
    def paths = []
    subprojects.each {
        paths += it.getProjectDir().path + "/logs".toString()
    }
    from paths
    duplicatesStrategy = DuplicatesStrategy.WARN
    into "build/logs/"
}