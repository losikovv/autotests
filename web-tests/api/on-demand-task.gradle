
task apiShadowcat(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-shadowcat.xml'
        includeGroups 'api-shadowcat'
    }
    environment 'PROJECT_ID', 'DS'
    environment 'TEST_RUN_NAME', 'Shadowcat API Regress'
}

task apiSurge(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/surge-api.xml'
        includeGroups 'surge-api'
    }
    environment 'PROJECT_ID', 'SURGE'
    environment 'TEST_RUN_NAME', 'Surge API Regress'
}

task apiRisExporter(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-ris-exporter.xml'
        includeGroups 'api-ris-exporter'
    }
    environment 'PROJECT_ID', 'PB'
    environment 'TEST_RUN_NAME', 'Ris-Exporter API Regress'
}

task apiAuthorizationService(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-authorization-service.xml'
        includeGroups 'api-authorization-service'
    }
    environment 'PROJECT_ID', 'CS'
    environment 'TEST_RUN_NAME', 'Authorization Service API Regress'
}

task onDemandShifts(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/shifts.xml'
        includeGroups 'api-shifts'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-shifts"
    environment 'PROJECT_ID', 'ODFS'
    environment 'TEST_RUN_NAME', 'Shifts Autotests'
}

task onDemandDispatch(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/dispatch.xml'
        includeGroups 'dispatch-orderservice-smoke'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-orderservice"
    environment 'PROJECT_ID', 'DSPTCH'
    environment 'TEST_RUN_NAME', 'Dispatch 2.0 Autotests'
}

task onDemandWorkflow(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/workflow.xml'
        includeGroups 'dispatch-workflow-smoke'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-workflow"
    environment 'PROJECT_ID', 'ODW'
    environment 'TEST_RUN_NAME', 'Workflow Autotests'
}

task onDemandETA(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/eta.xml'
        includeGroups 'ondemand-eta'
    }
    environment 'PROJECT_ID', 'ETA'
    environment 'TEST_RUN_NAME', 'ETA Autotests'
}

task onDemandShippingCalc(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/shippingcalc.xml'
        includeGroups 'ondemand-shippingcalc'
    }
    environment 'PROJECT_ID', 'SHPCALC'
    environment 'TEST_RUN_NAME', 'ShippingCalc Autotests'
}

task onDemandCandidates(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/candidates.xml'
        includeGroups 'dispatch-candidates-smoke'
    }
    environment 'P_ENV', "service-candidates"
    environment 'PROJECT_ID', 'ODSC'
    environment 'TEST_RUN_NAME', 'On Demand Candidates Smoke'
}

task onDemandSurgeLevel(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/surgelevel.xml'
        includeGroups 'ondemand-surgelevel'
    }
    environment 'PROJECT_ID', 'SURGE'
    environment 'TEST_RUN_NAME', 'SurgeLevel Autotests'
}

task onDemandRes(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/routeestimator.xml'
        includeGroups 'ondemand-res-smoke'
    }
    environment 'PROJECT_ID', 'RES'
    environment 'TEST_RUN_NAME', 'RES Autotests'
}

task onDemandASML(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/assembly.xml'
        includeGroups 'assembly-dispatch'
    }
    environment 'P_ENV', "service-assembly"
    environment 'PROJECT_ID', 'ASML'
    environment 'TEST_RUN_NAME', 'Assembly Dispatch'
}