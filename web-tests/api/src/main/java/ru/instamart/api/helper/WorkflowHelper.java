package ru.instamart.api.helper;

import com.google.protobuf.Duration;
import com.google.protobuf.Timestamp;
import com.google.protobuf.util.Timestamps;
import io.qameta.allure.Step;
import org.awaitility.Awaitility;
import ru.instamart.api.enums.SessionType;
import ru.instamart.api.factory.SessionFactory;
import ru.instamart.api.model.v2.OrderV2;
import ru.instamart.api.model.workflows.ShopperAssignment;
import ru.instamart.api.request.workflows.AssignmentsRequest;
import ru.instamart.api.request.workflows.SegmentsRequest;
import ru.instamart.api.response.workflows.AssignmentResponse;
import ru.instamart.api.response.workflows.AssignmentsResponse;
import ru.instamart.jdbc.dao.orders_service.publicScheme.JobsDao;
import ru.instamart.jdbc.dao.stf.StoresDao;
import ru.instamart.jdbc.entity.order_service.publicScheme.JobsEntity;
import ru.instamart.kraken.config.EnvironmentProperties;
import ru.instamart.kraken.data.StartPointsTenants;
import ru.instamart.kraken.data.user.UserData;
import ru.instamart.kraken.data.user.UserManager;
import workflow.ServiceGrpc.ServiceBlockingStub;
import workflow.WorkflowEnums;
import workflow.WorkflowEnums.DeliveryType;
import workflow.WorkflowEnums.SegmentType;
import workflow.WorkflowOuterClass;
import workflow.WorkflowOuterClass.CreateWorkflowsRequest;
import workflow.WorkflowOuterClass.RejectWorkflowByShipmentUuidResponse;
import workflow.WorkflowOuterClass.Shift.Transport;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

import static java.util.Arrays.asList;
import static org.awaitility.Awaitility.with;
import static ru.instamart.api.checkpoint.StatusCodeCheckpoints.checkStatusCode200;
import static ru.instamart.kraken.data.StartPointsTenants.METRO_WORKFLOW_END;
import static ru.instamart.kraken.data.StartPointsTenants.METRO_WORKFLOW_START;
import static ru.instamart.kraken.util.TimeUtil.getDatePlusSec;

public class WorkflowHelper {

    private static final UserData secondShopper = UserManager.getShp6Universal2();

    @Step("Подготавливаем запрос для создания маршрутного листа")
    public static CreateWorkflowsRequest getWorkflowsRequest(final OrderV2 order, final String shipmentUuid, final Timestamp time,
                                                             final DeliveryType deliveryType, final List<JobsEntity> jobs, final Integer shiftId) {
        var mapJobs = jobs.stream()
                .map(JobsEntity::getJobId)
                .collect(Collectors.toList());

        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(SessionFactory.getSession(SessionType.SHOPPER_APP).getUserData().getUuid())
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH.getNumber())
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(deliveryType.getNumber())
                                .setShift(WorkflowOuterClass.Shift.newBuilder()
                                        .setId(shiftId)
                                        .setTransport(Transport.PEDESTRIAN)
                                        .build())
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.ARRIVE)
                                .addAllJobUuids(mapJobs)
                                .setPosition(0)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300100))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.ASSEMBLY)
                                .addAllJobUuids(mapJobs)
                                .setPosition(1)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300100))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.DELIVERY)
                                .setPosition(2)
                                .addAllJobUuids(mapJobs)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(getDatePlusSec(300150))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300250))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                )
                .build();
    }


    @Step("Подготавливаем запрос для создания маршрутного листа")
    public static CreateWorkflowsRequest getWorkflowsRequest(final OrderV2 order, final String shipmentUuid, final Timestamp time, final DeliveryType deliveryType, final Integer shiftsId) {
        var map = new HashMap<String, String>();
        map.put("decline_performer_uuid", "");
        map.put("dispatch_count", "0");
        map.put("dispatch_id", "");
        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(SessionFactory.getSession(SessionType.SHOPPER_APP).getUserData().getUuid())
                                .setSourceType(WorkflowEnums.SourceType.DISPATCH)
                                .setPerformerVehicle(WorkflowEnums.PerformerVehicle.PEDESTRIAN)
                                .setDeliveryType(deliveryType)
//                                .setParentJobUuid("ad9e0dfd-9274-4a7c-8363-34218e2af0bd")
//                                .putAllMeta(map)
                                .setShift(
                                        WorkflowOuterClass.Shift.newBuilder()
                                                .setId(shiftsId)
                                                .setTransport(WorkflowOuterClass.Shift.Transport.PEDESTRIAN)
                                                .build()
                                )
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.ARRIVE)
                                .setPosition(0)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setPlanEndedAt(getDatePlusSec(301000))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
//                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
//                                .setType(WorkflowEnums.SegmentType.RECEIVING_FOR_DELIVERY)
//                                .setPosition(1)
//                                .addShipments(WorkflowEnums.Shipment.newBuilder()
//                                        .setNumber(order.getShipments().get(0).getNumber())
//                                        .setUuid(shipmentUuid)
//                                        .setItemsCount(1500)
//                                        .setItemsTotalAmount(2539.5f)
//                                        .setWeightKg(10f)
//                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
//                                        .setIsHeavy(false)
//                                        .setIsNew(false)
//                                        .setStoreName("METRO, Дмитровское ш")
//                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
//                                        .build())
//                                .setLocationStart(WorkflowEnums.Location.newBuilder()
//                                        .setLat(METRO_WORKFLOW_START.getLat())
//                                        .setLon(METRO_WORKFLOW_START.getLon())
//                                        .build())
//                                .setPlanStartedAt(getDatePlusSec(301000))
//                                .setPlanEndedAt(getDatePlusSec(302000))
//                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
//                                        .setLat(METRO_WORKFLOW_END.getLat())
//                                        .setLon(METRO_WORKFLOW_END.getLon())
//                                        .build())
//                                .setDuration(Duration.newBuilder().setSeconds(10).build())
//                                .setDistance(25L)
//                                .build())

                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.DELIVERY)
                                .setPosition(2)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(getDatePlusSec(302000))
                                .setPlanEndedAt(getDatePlusSec(303000))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.PASS_TO_CLIENT)
                                .setPosition(3)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(getDatePlusSec(303000))
                                .setPlanEndedAt(getDatePlusSec(304000))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setDuration(Duration.newBuilder().setSeconds(360).build())
                                .setDistance(25L)
                                .build())
                        .build())
                .build();
    }

    @Step("Подготавливаем запрос для создания маршрутного листа c разными параметрами")
    public static CreateWorkflowsRequest getWorkflowsRequestWithDifferentParams(final OrderV2 order, final String shipmentUuid,
                                                                                final OrderV2 secondOrder, final String secondShipmentUuid, final String parentUuid,
                                                                                final List<JobsEntity> jobs, final List<JobsEntity> secondJobs, final Integer shiftId) {
        final var jobsList = jobs.stream()
                .map(JobsEntity::getJobId)
                .collect(Collectors.toList());
        final var secondJobsList = secondJobs.stream()
                .map(JobsEntity::getJobId)
                .collect(Collectors.toList());

        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(secondShopper.getUuid())
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH_VALUE)
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(DeliveryType.DEFAULT_VALUE)
                                .setPostponedParentUuid(parentUuid)
                                .setShift(WorkflowOuterClass.Shift.newBuilder()
                                        .setId(shiftId)
                                        .setTransport(Transport.CAR)
                                        .build())
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.ARRIVE_VALUE)
                                .setPosition(0)
                                .addAllJobUuids(jobsList)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(true)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.DELIVERY_VALUE)
                                .setPosition(2)
                                .addAllJobUuids(secondJobsList)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(secondOrder.getShipments().get(0).getNumber())
                                        .setUuid(secondShipmentUuid)
                                        .setItemsCount(1520)
                                        .setItemsTotalAmount(1539.5f)
                                        .setWeightKg(12f)
                                        .setStoreUuid("6ac61a21-942b-47af-b07d-7b5fb7ffb8fa")
                                        .setIsHeavy(true)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.fromDate(new Date()))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.fromDate(new Date()))
                                .setDuration(Duration.newBuilder().setSeconds(12).build())
                                .setDistance(24L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.PASS_TO_CLIENT_VALUE)
                                .setPosition(3)
                                .addAllJobUuids(secondJobsList)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(secondOrder.getShipments().get(0).getNumber())
                                        .setUuid(secondShipmentUuid)
                                        .setItemsCount(1502)
                                        .setItemsTotalAmount(2139.5f)
                                        .setWeightKg(11f)
                                        .setStoreUuid("6ac61a21-942b-47af-b07d-7b5fb7ffb8fa")
                                        .setIsHeavy(true)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.fromDate(new Date()))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.fromDate(new Date()))
                                .setDuration(Duration.newBuilder().setSeconds(14).build())
                                .setDistance(11L)
                                .build())
                        .build())
                .build();
    }

    @Step("Подготавливаем запрос для создания маршрутного листа на сборку")
    public static CreateWorkflowsRequest getWorkflowsRequestWithAssembly(final OrderV2 secondOrder, final String secondShipmentUuid, final Timestamp time, final DeliveryType deliveryType,
                                                                         final List<JobsEntity> jobs, final Integer shiftId) {
        final var jobsList = jobs.stream()
                .map(JobsEntity::getJobId)
                .collect(Collectors.toList());

        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(SessionFactory.getSession(SessionType.SHOPPER_APP).getUserData().getUuid())
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH.getNumber())
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(deliveryType.getNumber())
                                .setShift(WorkflowOuterClass.Shift.newBuilder()
                                        .setId(shiftId)
                                        .setTransport(Transport.PEDESTRIAN)
                                        .build())
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.ASSEMBLY_VALUE)
                                .setPosition(0)
                                .addAllJobUuids(Collections.singleton(jobsList.get(1)))
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(secondOrder.getShipments().get(0).getNumber())
                                        .setUuid(secondShipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(true)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(jobsList)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(301000))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.PASS_TO_DELIVERY_VALUE)
                                .setPosition(1)
                                .addAllJobUuids(Collections.singleton(jobsList.get(1)))
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(secondOrder.getShipments().get(0).getNumber())
                                        .setUuid(secondShipmentUuid)
                                        .setItemsCount(1520)
                                        .setItemsTotalAmount(1539.5f)
                                        .setWeightKg(12f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(true)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(jobsList)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(getDatePlusSec(301000))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(301000))
                                .setDuration(Duration.newBuilder().setSeconds(12).build())
                                .setDistance(24L)
                                .build())
                        .build())
                .build();

    }

    @Step("Подготавливаем запрос для создания маршрутного листа c транспортом {transportType}")
    public static CreateWorkflowsRequest getWorkflowsRequestWithTransport(final OrderV2 order, final String shipmentUuid, final long transportId, final Transport transportType, final Integer shiftId) {
        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(SessionFactory.getSession(SessionType.SHOPPER_APP).getUserData().getUuid())
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH.getNumber())
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(DeliveryType.DEFAULT_VALUE)
                                .setShift(WorkflowOuterClass.Shift.newBuilder()
                                        .setId(shiftId)
                                        .setTransport(transportType)
                                        .build())
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.ARRIVE_VALUE)
                                .setPosition(0)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.DELIVERY_VALUE)
                                .setPosition(2)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.PASS_TO_CLIENT_VALUE)
                                .setPosition(3)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .build())
                .build();
    }

    @Step("Подготавливаем запрос для создания маршрутного листа c разными магазинами в сегментах")
    public static CreateWorkflowsRequest getWorkflowsRequestWithDifferentStores(final OrderV2 order, final String shipmentUuid, final String performerUuid) {
        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(performerUuid)
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH.getNumber())
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(DeliveryType.DEFAULT_VALUE)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.ARRIVE_VALUE)
                                .setPosition(0)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.DELIVERY_VALUE)
                                .setPosition(2)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid(StoresDao.INSTANCE.findById(EnvironmentProperties.DEFAULT_SID).get().getUuid())
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setTypeValue(SegmentType.PASS_TO_CLIENT_VALUE)
                                .setPosition(3)
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid(StoresDao.INSTANCE.findById(EnvironmentProperties.DEFAULT_METRO_MOSCOW_SID).get().getUuid())
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(Timestamps.MAX_VALUE)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(Timestamps.MAX_VALUE)
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .build())
                .build();
    }


    @Step("Отменяем маршрутный лист")
    public static RejectWorkflowByShipmentUuidResponse cancelWorkflow(final ServiceBlockingStub clientWorkflow, final String shipmentUuid) {
        final var request = WorkflowOuterClass.RejectWorkflowByShipmentUuidRequest
                .newBuilder()
                .setShipmentUuid(shipmentUuid)
                .build();

        return clientWorkflow.rejectWorkflowByShipmentUUID(request);
    }

    @Step("Берем в работу маршрутный лист")
    public static void acceptWorkflow(String assignmentId) {
        final var response = AssignmentsRequest.Accept.PATCH(assignmentId);
        checkStatusCode200(response);
    }

    @Step("Берем в работу маршрутный лист и начинаем маршрут")
    public static AssignmentResponse acceptWorkflowAndStart(final String assignmentId, final StartPointsTenants coordinates) {
        final var response = AssignmentsRequest.Accept.PATCH(assignmentId, coordinates);
        checkStatusCode200(response);
        return response.as(AssignmentResponse.class);
    }

    public static String getWorkflowUuid(final OrderV2 order, final String shipmentUuid, final Timestamp timestamp, final ServiceBlockingStub clientWorkflow) {
        return getWorkflowUuid(order, shipmentUuid, timestamp, clientWorkflow, null, null);
    }

    @Step("Создаем маршрутный лист")
    public static String getWorkflowUuid(final OrderV2 order, final String shipmentUuid, final Timestamp timestamp, final ServiceBlockingStub clientWorkflow, final List<JobsEntity> jobUuid, final Integer shiftId) {
        final var request = getWorkflowsRequest(order, shipmentUuid, timestamp, DeliveryType.DEFAULT, jobUuid, shiftId);
        final var response = clientWorkflow.createWorkflows(request);
        return response.getResultsMap().keySet().toArray()[0].toString();
    }

    @Step("Получаем список маршрутных листов шоппера")
    public static List<ShopperAssignment> getShopperAssignments() {
        final var response = AssignmentsRequest.GET();
        checkStatusCode200(response);
        return asList(response.as(ShopperAssignment[].class));
    }

    @Step("Ожидание маршрутного листа")
    public static List<AssignmentsResponse> getAllShopperAssignments() {
        with().pollInSameThread()
                .await() //wiki https://github.com/awaitility/awaitility/wiki/Usage
                .atMost(3, TimeUnit.MINUTES) //максимальное время ожидания
                .pollInterval(15, TimeUnit.SECONDS) //Интервал между запросами
                .until(() -> {
                    final var response = AssignmentsRequest.All.GET();
                    final var assignmentsResponses = response.as(AssignmentsResponse[].class);
                    return Arrays.stream(assignmentsResponses).count() > 0;
                });
        final var responseAll = AssignmentsRequest.All.GET();
        checkStatusCode200(responseAll);
        final var assignmentsResponses = responseAll.as(AssignmentsResponse[].class);
        return asList(assignmentsResponses);
    }

    @Step("Завершить первый сегмент (Подлёт)")
    public static AssignmentResponse stopSegments(final Long workflowId, final Long segmentId, final StartPointsTenants coordinates) {
        final var segmentData = SegmentsRequest.SegmentData.builder()
                .segmentId(segmentId)
                .lat(coordinates.getLat())
                .lon(coordinates.getLon())
                .skipGeoWarn(true)
                .build();
        final var response = SegmentsRequest.PATCH(workflowId, segmentData);
        checkStatusCode200(response);
        return response.as(AssignmentResponse.class);
    }

    public static List<JobsEntity> awaitJobUuid(final String shipmentUuid, final long seconds) {
        Awaitility.await()
                .atMost(seconds, TimeUnit.SECONDS)
                .until(() -> JobsDao.INSTANCE.findByShipmentUuid(shipmentUuid).size() > 0);
        return JobsDao.INSTANCE.findByShipmentUuid(shipmentUuid);
    }

    @Step("Подготавливаем запрос для создания маршрутного листа на доставку")
    public static CreateWorkflowsRequest getWorkflowsRequestDelivery(final OrderV2 order, final String shipmentUuid, final Timestamp time,
                                                                     final DeliveryType deliveryType, final List<JobsEntity> jobs, final Integer shiftId) {
        var mapJobs = jobs.stream()
                .map(JobsEntity::getJobId)
                .collect(Collectors.toList());
        var jobDelivery = mapJobs.get(0);

        return CreateWorkflowsRequest
                .newBuilder()
                .addWorkflows(WorkflowOuterClass.Workflow.newBuilder()
                        .addAssignments(WorkflowOuterClass.Assignment.newBuilder()
                                .setPerformerUuid(SessionFactory.getSession(SessionType.SHOPPER_APP).getUserData().getUuid())
                                .setSourceTypeValue(WorkflowEnums.SourceType.DISPATCH.getNumber())
                                .setPerformerVehicleValue(WorkflowEnums.PerformerVehicle.PEDESTRIAN_VALUE)
                                .setDeliveryTypeValue(deliveryType.getNumber())
                                .setShift(WorkflowOuterClass.Shift.newBuilder()
                                        .setId(shiftId)
                                        .setTransport(Transport.PEDESTRIAN)
                                        .build())
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.ARRIVE)
                                .setPosition(0)
                                .addAllJobUuids(Collections.singleton(jobDelivery))
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300100))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.RECEIVING_FOR_DELIVERY)
                                .setPosition(1)
                                .addAllJobUuids(Collections.singleton(jobDelivery))
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(true)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(time)
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300100))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                        .addSegments(WorkflowOuterClass.Segment.newBuilder()
                                .setType(SegmentType.DELIVERY)
                                .setPosition(2)
                                .addAllJobUuids(Collections.singleton(jobDelivery))
                                .addShipments(WorkflowEnums.Shipment.newBuilder()
                                        .setNumber(order.getShipments().get(0).getNumber())
                                        .setUuid(shipmentUuid)
                                        .setItemsCount(1500)
                                        .setItemsTotalAmount(2539.5f)
                                        .setWeightKg(10f)
                                        .setStoreUuid("599ba7b7-0d2f-4e54-8b8e-ca5ed7c6ff8a")
                                        .setIsHeavy(false)
                                        .setIsNew(false)
                                        .setStoreName("METRO, Дмитровское ш")
                                        .setStoreAddress("Москва, Дмитровское ш, 165Б")
                                        .addAllJobUuids(mapJobs)
                                        .build())
                                .setLocationStart(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_START.getLat())
                                        .setLon(METRO_WORKFLOW_START.getLon())
                                        .build())
                                .setPlanStartedAt(getDatePlusSec(300150))
                                .setLocationEnd(WorkflowEnums.Location.newBuilder()
                                        .setLat(METRO_WORKFLOW_END.getLat())
                                        .setLon(METRO_WORKFLOW_END.getLon())
                                        .build())
                                .setPlanEndedAt(getDatePlusSec(300250))
                                .setDuration(Duration.newBuilder().setSeconds(10).build())
                                .setDistance(25L)
                                .build())
                )
                .build();
    }
}
