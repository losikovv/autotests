task apiShopperSmoke(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-shopper.xml'
        includeGroups 'api-shopper-smoke'
    }
    systemProperty 'qase.Project', 'SHAPI'
    systemProperty 'qase.Title', 'Shopper API Smoke'
//    systemProperty 'one_session', 'true'
}

task apiShopperRegress(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-shopper.xml'
        includeGroups 'api-shopper-smoke', 'api-shopper-regress'
    }
    systemProperty 'qase.Project', 'SHAPI'
    systemProperty 'qase.Title', 'Shopper API Regress'
//    systemProperty 'one_session', 'true'
}

task apiV2InstamartRegress(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-v2-instamart.xml'
        includeGroups 'api-instamart-smoke', 'api-instamart-regress'
    }
    boolean isCiServer = System.getenv().containsKey("CI")
    if (isCiServer) {
        retry {
            // Максимальное количество повторов
            maxRetries = 1
            // Количество тестов при падении которых не запускается ретрай
            maxFailures = 20
            // true тест падает с ошибкой при удачном повторе
            failOnPassedAfterRetry = false
        }
    }
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Instamart API Regress'
}

task apiV1InstamartRegress(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-v1-instamart.xml'
        includeGroups 'api-instamart-smoke', 'api-instamart-regress'
    }
    boolean isCiServer = System.getenv().containsKey("CI")
    if (isCiServer) {
        retry {
            // Максимальное количество повторов
            maxRetries = 1
            // Количество тестов при падении которых не запускается ретрай
            maxFailures = 20
            // true тест падает с ошибкой при удачном повторе
            failOnPassedAfterRetry = false
        }
    }
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Instamart API Regress'
}

task apiV3InstamartRegress(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-v3-instamart.xml'
        includeGroups 'api-instamart-smoke', 'api-instamart-regress'
    }
    boolean isCiServer = System.getenv().containsKey("CI")
    if (isCiServer) {
        retry {
            // Максимальное количество повторов
            maxRetries = 1
            // Количество тестов при падении которых не запускается ретрай
            maxFailures = 20
            // true тест падает с ошибкой при удачном повторе
            failOnPassedAfterRetry = false
        }
    }
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Instamart API Regress'
}

task apiInstamartSmoke(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-all.xml'
        includeGroups 'api-instamart-smoke'
    }
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Instamart API Smoke'
}

task apiV2BFF(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/all.xml'
        includeGroups 'api-bff'
    }
    environment 'URL_STF_BACKEND', 'stf-kraken.k-stage.sbermarket.tech'
    systemProperty 'bff', 'true'
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'BFF API v2'
}

task apiv3Smoke(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-v3.xml'
        includeGroups 'api-instamart-smoke'
    }
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Smoke endpoints Api v3'
}

task apiV3Notifications(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-v3-notifications.xml'
        includeGroups 'api-instamart-smoke', 'api-instamart-regress'
    }
    environment 'P_ENV', "sbermarket-staging_mannschaft"
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'API v3 Notifications'
}

task apiRetailerE2E(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-retailers.xml'
        includeGroups 'api-retailer'
    }
    environment 'P_ENV', "sbermarket-production"
    environment 'DEFAULT_SID', '18'
}

task apiInstamartProduction(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-instamart-prod.xml'
        includeGroups 'api-instamart-prod'
    }
    environment 'P_ENV', "sbermarket-production"
    environment 'DEFAULT_SID', '18'
    systemProperty 'qase.Project', 'INAPI'
    systemProperty 'qase.Title', 'Instamart API Regress'
}

task apiShopperProduction(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-shopper.xml'
        includeGroups 'api-shopper-prod'
    }
    environment 'P_ENV', "sbermarket-production"
    environment 'DEFAULT_SID', '18'
    systemProperty 'qase.Project', 'SHAPI'
    systemProperty 'qase.Title', 'Shopper API Regress'
    systemProperty 'one_session', 'true'
}

task apiShadowcat(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-shadowcat.xml'
        includeGroups 'api-shadowcat'
    }
    systemProperty 'qase.Project', 'DS'
    systemProperty 'qase.Title', 'Shadowcat API Regress'
}

task apiSurge(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/surge-api.xml'
        includeGroups 'surge-api'
    }
    systemProperty 'qase.Project', 'SURGE'
    systemProperty 'qase.Title', 'Surge API Regress'
}

task apiRisExporter(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-ris-exporter.xml'
        includeGroups 'api-ris-exporter'
    }
    systemProperty 'qase.Project', 'PB'
    systemProperty 'qase.Title', 'Ris-Exporter API Regress'
}

task apiAuthorizationService(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/api-authorization-service.xml'
        includeGroups 'api-authorization-service'
    }
    systemProperty 'qase.Project', 'CS'
    systemProperty 'qase.Title', 'Authorization Service API Regress'
}

task onDemandShifts(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/shifts.xml'
        includeGroups 'api-shifts'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-shifts"
    systemProperty 'qase.Project', 'ODFS'
    systemProperty 'qase.Title', 'Shifts Autotests'
}

task onDemandDispatch(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/dispatch.xml'
        includeGroups 'dispatch-orderservice-smoke'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-orderservice"
    systemProperty 'qase.Project', 'DSPTCH'
    systemProperty 'qase.Title', 'Dispatch 2.0 Autotests'
}

task onDemandWorkflow(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/workflow.xml'
        includeGroups 'dispatch-workflow-smoke'
    }
    environment 'URL_STF_BACKEND', 'stf-6.k-stage.sbermarket.tech'
    environment 'URL_SHP', 'shp-6.k-stage.sbermarket.tech'
    environment 'P_ENV', "service-workflow"
    systemProperty 'qase.Project', 'ODW'
    systemProperty 'qase.Title', 'Workflow Autotests'
}

task onDemandETA(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/eta.xml'
        includeGroups 'dispatch-eta-smoke', 'dispatch-eta-regress'
    }
    systemProperty 'qase.Project', 'ETA'
    systemProperty 'qase.Title', 'ETA Autotests'
}

task onDemandShippingCalc(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/shippingcalc.xml'
        includeGroups 'dispatch-shippingcalc-smoke', 'dispatch-shippingcalc-regress'
    }
    systemProperty 'qase.Project', 'SHPCALC'
    systemProperty 'qase.Title', 'ShippingCalc Autotests'
}

task onDemandCandidates(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/candidates.xml'
        includeGroups 'dispatch-candidates-smoke'
    }
    environment 'P_ENV', "service-candidates"
    systemProperty 'qase.Project', 'ODSC'
    systemProperty 'qase.Title', 'On Demand Candidates Smoke'
}

task onDemandSurgeLevel(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/surgelevel.xml'
        includeGroups 'ondemand-surgelevel-smoke', 'ondemand-surgelevel-regress'
    }
    systemProperty 'qase.Project', 'SURGE'
    systemProperty 'qase.Title', 'SurgeLevel Autotests'
}

task onDemandRes(type: Test) {
    useTestNG() {
        suites 'src/test/resources/suite/on_demand/routeestimator.xml'
        includeGroups 'ondemand-res-smoke'
    }
    systemProperty 'qase.Project', 'RES'
    systemProperty 'qase.Title', 'RES Autotests'
}