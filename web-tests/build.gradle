buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }
}

plugins {
    id'java'
    id("io.qameta.allure") version "2.8.1"
}
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
String allureVersion = '2.13.1'
allure {
    version = allureVersion
    aspectjweaver = true
    autoconfigure = true
//    resultsGlob = {
//        include '/path/to/project/**/build/**/allure-results'
//        exclude '/path/to/project/web-tests/build'
//    }
    useTestNG {
        version = allureVersion
    }
    downloadLink = "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/"+allureVersion+"/allure-commandline-"+allureVersion+".zip"
}

dependencies {
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '3.14.0'
    compile "org.aspectj:aspectjweaver:1.9.6"
    //implementation "io.qameta.allure:allure-gradle:2.8.1"
    implementation "io.qameta.allure:allure-testng:"+allureVersion
    implementation "io.qameta.allure:allure-java-commons:"+allureVersion
    implementation 'org.jetbrains:annotations:19.0.0'
    compile 'io.rest-assured:rest-assured:4.1.1'
    implementation 'io.rest-assured:json-schema-validator:4.1.1'
	implementation 'org.testng:testng:6.8.8'
    implementation 'org.seleniumhq.selenium:selenium-java:3.8.1'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'
    compile group: 'io.qase', name: 'qase-api', version: '1.0.2'
    compile group: 'io.qase', name: 'qase-testng', version: '1.0.2'
}
//runtime group: 'org.aspectj', name: 'aspectjweaver', version: '1.6.10'
repositories {
    mavenLocal()
    jcenter()
}

sourceSets {
    main {
        java.srcDir file('src/main/java/ru')
        resources.srcDir file('src/main/resources')
    }
    test {
        java.srcDir file('src/test/')
        resources.srcDir file('src/test/resources')
    }
}

task allureCopyHistoryDir(type: Copy) {
    from "build/reports/allure-report/history"
    into "build/allure-results/history"
}

task sberSmoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
        systemProperty 'qase.plan.id', 2
    }
}

task apiRegress(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-v2-smoke', 'api-v2-regress', 'api-shopper-smoke', 'api-shopper-regress'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task apiV2Regress(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-v2-smoke', 'api-v2-regress'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
        systemProperty 'qase.plan.id', 1
    }
}

task apiShopperRegress(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-shopper-smoke', 'api-shopper-regress'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
        systemProperty 'qase.plan.id', 2
    }
}

task apiSmoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-v2-smoke', 'api-shopper-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task apiV2Smoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-v2-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
        systemProperty 'qase.plan.id', 3
    }
}

task apiShopperSmoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-shopper-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
        systemProperty 'qase.plan.id', 4
    }
}

task apiZones(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/api-suite.xml'
        includeGroups 'api-zones'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}


task Testing(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'testing'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    //todo дублирование кода я не уверен, что эту секцию нужно дублировать в каждой конфигурации, скорее наоборот
    /*if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }*/
}


task sberAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-acceptance','sbermarket-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task sberRegression(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-regression','sbermarket-acceptance','sbermarket-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task metroSmoke(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task metroAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-acceptance'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task metroRegression(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task lentaSmoke(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task lentaAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-acceptance'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

task lentaRegression(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
    if (project.hasProperty('qase')) {
        systemProperty 'qase', "${qase}"
    }
}

/* trying to add custom listeners
task sberRegression(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
        options {
            listeners.add("src/main/java/utils/MyTestListerAdapter.java")
        }
    }
}
*/

