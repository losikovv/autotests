apply plugin: 'java'

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:19.0.0'
    compile 'io.rest-assured:rest-assured:4.1.1'
    implementation 'io.rest-assured:json-schema-validator:4.1.1'
	implementation 'org.testng:testng:6.8.8'
    implementation 'org.seleniumhq.selenium:selenium-java:3.8.1'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

sourceSets {
    main {
        java.srcDir file('src/main/java/ru')
        resources.srcDir file('src/main/resources')
    }
    test {
        java.srcDir file('src/test/')
        resources.srcDir file('src/test/resources')
    }
}

task sberSmoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task restRegress(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'rest'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}


task restSmoke(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'rest-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task restZones(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'rest-zones'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}


task Testing(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'testing'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    //todo дублирование кода я не уверен, что эту секцию нужно дублировать в каждой конфигурации, скорее наоборот
    /*if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }*/
}


task sberAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-acceptance'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task sberRegression(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task metroSmoke(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task metroAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-acceptance'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task metroRegression(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'metro-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task lentaSmoke(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-smoke'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task lentaAcceptance(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-acceptance'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

task lentaRegression(type: Test){
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'lenta-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser',"${browser}"
    }
    if (project.hasProperty('env')) {
        systemProperty 'env',"${env}"
    }
}

/* trying to add custom listeners
task sberRegression(type: Test) {
    useTestNG() {
        testLogging.showStandardStreams = true
        useDefaultListeners = true
        suites 'src/test/resources/suite.xml'
        includeGroups 'sbermarket-regression'
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
        options {
            listeners.add("src/main/java/utils/MyTestListerAdapter.java")
        }
    }
}
*/

