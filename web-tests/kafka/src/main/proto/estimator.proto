syntax = "proto3";

package estimator;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "gitlab.sbermarket.tech/paas/content/operations/route-estimator/pkg/server/grpc/estimator";

service RouteEstimator {
  rpc GetRouteEstimation (GetRouteEstimationRequest) returns (GetRouteEstimationResponse) {
    option (google.api.http) = {
      post: "/api/routes"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "расчет маршрутов"
    };
  }
}

message GetRouteEstimationRequest {
  repeated EstimatePerformer performers = 1;
}

message EstimatePerformer {
  string uuid = 1;
  PerformerType type = 2; // Тип исполнителя (сборщик, курьер, универсал)
  PerformerVehicle vehicle = 3; // Транспорт исполнителя (пешеход, вело, авто)
  Location start_location = 4; // Стартовая позиция
  google.protobuf.Timestamp time_to_calc = 5; // Время на которое производится расчет
  repeated Segment segments = 6; // Рассчитываемые сегменты
}

message Location {
  double lat = 1;
  double lon = 2;
}

message Segment {
  SegmentType type = 1; // Тип сегмента
  uint32 order = 2; // Порядковый номер
  Location end_location = 3; // Позиция завершения
  optional string place_uuid = 4; // UUID магазина/места (опционально, для сегментов где нужна сборка)
  optional PlaceType place_type = 5; // Тип места (опционально, для сегментов где нужна сборка)
  optional uint64 number_of_positions_in_order = 6; // Количество позиций в заказе (опционально, для сегментов где нужна сборка)
  optional uint64 order_weight_gramms = 7; // Вес позиций (опционально, для сегментов где нужна сборка)
  enum PlaceType {
    STORE = 0; // Пока только магазины
  }
}

enum SegmentType {
  ARRIVE = 0;
  ASSEMBLY = 1;
  PASS_TO_DELIVERY = 2;
  DELIVERY = 3;
  PASS_TO_CLIENT = 5;
  RECEIVING_FOR_DELIVERY = 6;
}

// ----------------------------------
// Возвращаемый результат
// ----------------------------------

message GetRouteEstimationResponse {
  repeated PerformerEvaluation performers = 1;
}

message PerformerEvaluation {
  string uuid = 1;
  PerformerType type = 2; // Тип исполнителя (сборщик, курьер, универсал)
  PerformerVehicle vehicle = 3; // Транспорт исполнителя (пешеход, вело, авто)
  Location start_location = 4; // Стартовая позиция
  google.protobuf.Timestamp time_to_calc = 5; // Время на которое производится расчет
  repeated SegmentTime segments = 6;
}

message SegmentTime {
  SegmentType type = 1; // Тип сегмента
  uint32 order = 2; // Порядковый номер
  EstimateType estimate_type = 3; //  тип расчета
  Location start_location = 4; // Позиция начала
  Location end_location = 5; // Позиция завершения
  google.protobuf.Timestamp start_time = 6; // Время начала
  google.protobuf.Timestamp end_time = 7; // Время завершения
  google.protobuf.Duration duration = 8; // длительность
  uint64 distance = 9; // расстояние
  enum EstimateType {
    FALLBACK = 0;
    TWO_GIS = 1;
  }
  google.protobuf.Duration time_lag = 10; // выделенный лаг по времени, уже включен в duration Может иметь различный смысл в зависимости от типа сегмента
}

enum PerformerType {
  COLLECTOR = 0;
  COURIER = 1;
  UNIVERSAL = 2;
}
enum PerformerVehicle {
  PEDESTRIAN = 0;
  AUTO = 1;
  BIKE = 2;
}