syntax = "proto3";

package catalog;

option go_package = "gitlab.sbermarket.tech/paas/content/catalog/pkg/server/grpc/catalog";

service CatalogService {
    rpc GetProducts(GetProductsRequest) returns (GetProductsResponse);
    rpc FlushCategoryFacetsCache(Empty) returns (Empty);
}

message GetProductsRequest {
    string store_id = 1;
    string tenant_id = 2;
    string category_id = 3;
    repeated AttributeFilter attribute_filters = 4;
    DisplayAttributes display_attributes = 5;
    int64 limit = 6;
    int64 offset = 7;
    bool available = 8;
    Sort sort = 9;
    repeated string except_attribute_keys = 10;
}

message GetProductsResponse{
    repeated ProductWithOffer products = 1;
    int64 product_count = 2;
    repeated FilterFacet filter_facets = 3;
}

enum Sort {
	POPULARITY = 0;
	PRICE_ASC = 1;
	PRICE_DESC = 2;
}

message AttributeFilter {
    string attribute_key = 1;
    repeated string attribute_values = 2;
}

message DisplayAttributes {
    repeated string keys = 1;
    repeated string flags = 2;
}

message FilterFacet {
    string attribute_key = 1;
    repeated FilterFacetAttributeValues attribute_values = 2;
}

message FilterFacetAttributeValues {
    string value = 1;
    int64 product_count = 2;
}

message ProductWithOffer {
    int64 sku = 1;
    string name = 2;
    repeated Category categories = 3;
    repeated Attribute attributes = 4;
    Stock stock = 5;
    Price price = 6;
    Offer offer = 7;
    Status status = 8;
}

enum Status {
    DISABLE = 0;
    ENABLE = 1;
}

enum ValueType {
    STRING = 0;
    INTEGER = 1;
    DOUBLE = 2;
    BOOL = 3;
    DATETIME = 4;
    IMAGE = 5;
}

enum Pricer {
  PER_ITEM = 0;  // за штуку
  PER_ITEMS_PACKAGE = 1;  // за упаковку
  PER_WEIGHT_PACKAGE = 2;  // весовой фасованный
  PER_WEIGHT = 3;  // весовой, не фасованный
}

message Data {
    string key = 1;
    ValueType type = 2;
    bool is_multi_value = 3;
    repeated string values = 4;
}

message Category {
    string id = 1;
    string name = 2;
}

message Attribute {
    string key = 1;
    string name = 2;
    string dictionary_key = 3;
    ValueType type = 4;
    bool is_multi_value = 5;
    map<string, bool> flags = 6;
    repeated Data attribute_data = 7;
    repeated AttributeValue values = 8;
}

message AttributeValue {
    string value = 1;
    repeated Data value_data = 2;
}

message Stock {
    double stock = 1;
    repeated Data stock_data = 2;
    Status status = 3;
}

message Price {
    double price = 1;
    repeated Data price_data = 2;
    Status status = 3;
}

message Offer {
    Pricer pricer = 1;
    repeated Data offer_data = 2;
    Status status = 3;
}

message Empty{}
