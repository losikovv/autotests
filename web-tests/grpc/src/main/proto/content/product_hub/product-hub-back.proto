syntax = "proto3";

package product_hub_back;
option go_package = "gitlab.sbmt.io/paas/content/product-hub/pkg/server/grpc/product-hub-back";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";



/*
 * slack:
 *    #product-hub
 *
 * base:
 *     base-product-hub-back.paas-content-product-hub:3009
 *
 * local:
 *     base-product-hub-back.paas-content-product-hub.svc.cluster.local:3009
 *
 * swagger prod:
 *     https://paas-content-product-hub-back.sbmt.io/api
 *
 * swagger stg:
 *     https://paas-content-product-hub-back.gw-stage.sbmt.io/api
 *
 * public prod grpc uri:
 *    paas-content-product-hub-back.sbmt.io:443
 *
 * public stg grpc uri:
 *    paas-content-product-hub-back.gw-stage-back.sbmt.io:443
 *
 * description:
 *    Back сервис product-hub для импорта данных
 */
service ProductHubBack {
	/*
   * Сохраняет описание продуктов
  */
	rpc SaveProducts(SaveProductsRequest) returns (SaveProductsResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveProducts"
			body: "*"
		};
	}

	/*
   * Сохраняет стоки
  */
	rpc SaveStocks(SaveStocksRequest) returns (SaveStocksResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveStocks"
			body: "*"
		};
	}

	/*
   * Сохраняет товарные предложения
  */
	rpc SaveOffers(SaveOffersRequest) returns (SaveOffersResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveOffers"
			body: "*"
		};
	}

	/*
   * Сохраняет цены
  */
	rpc SavePrices(SavePricesRequest) returns (SavePricesResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SavePrices"
			body: "*"
		};
	}

	/*
   * Сохраняет категории
  */
	rpc SaveCategories(SaveCategoriesRequest) returns (SaveCategoriesResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveCategories"
			body: "*"
		};
	}

	/*
   * Сохраняет атрибуты
  */
	rpc SaveAttributes(SaveAttributesRequest) returns (SaveAttributesResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveAttributes"
			body: "*"
		};
	}

	/*
   * Сохраняет словари и значения словарей
  */
	rpc SaveDictionaries(SaveDictionariesRequest) returns (SaveDictionariesResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveDictionaries"
			body: "*"
		};
	}

	/**
   * Сохраняет категорийные фильтры
  */
	rpc SaveCategoryFilters(SaveCategoryFiltersRequest) returns (SaveCategoryFiltersResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveCategoryFilters"
			body: "*"
		};
	}

	/**
   * Сохраняет связки магазинов на ритейлеров
  */
	rpc SaveRetailerStores(SaveRetailerStoresRequest) returns (SaveRetailerStoresResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveRetailerStores"
			body: "*"
		};
	}

	/**
   * Сохраняет популярность
  */
	rpc SavePopularities(SavePopularitiesRequest) returns (SavePopularitiesResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SavePopularities"
			body: "*"
		};
	}

	/**
	 * Выключение офферов
	*/
	rpc DisableOffers(DisableOffersRequest) returns (DisableOffersResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/DisableOffers"
			body: "*"
		};
	}

	/**
	 * Связка store_id->retailer_id
	*/
	rpc SaveStoreIDtoRetailerID(SaveStoreIDtoRetailerIDRequest) returns (SaveStoreIDtoRetailerIDResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveStoreIDtoRetailerID"
			body: "*"
		};
	}

	/**
   * Сохранения групп скушек
   */
	rpc SaveGroups(SaveGroupsRequest) returns (SaveGroupsResponse)
	{
		option (google.api.http) = {
			post: "/api/product_hub_back.ProductHubBack/SaveGroups"
			body: "*"
		};
	}
}

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                    Основные сущности
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

/**
 * Статус любой сущности
 */
enum Status {
	DISABLE = 0; // сущность не активна
	ENABLE = 1; // сущность активна
	DELETED = 2; // сущность удалена из других систем (в product-hub сущности не удаляются)
}

/**
 * Тип атрибута (message Attribute) или data атрибута (message Data)
 */
enum ValueType {
	STRING = 0; // строка
	INTEGER = 1; // число
	DOUBLE = 2; // число с точкой
	BOOL = 3; // флаг
	DATETIME = 4; // время в формате ISO-8601 (YYYY-MM-DDThh:mm:ss)
	IMAGE = 5; // uri на картинку в s3
}

/**
 * Тип цены товарного предложения
 */
enum Pricer {
	PER_ITEM = 0;  // за штуку
	PER_ITEMS_PACKAGE = 1;  // за упаковку
	PER_WEIGHT_PACKAGE = 2;  // весовой фасованный
	PER_WEIGHT = 3;  // весовой, не фасованный
}

/**
 * Дата атрибут.
 * Используется для описания атрибутов сущностей Stock, Price, Offer.
 * Так же используется для доп. описания сущностей Attribute, Dictionary, DictionaryValue
 */
message Data {
	string key = 1; // уникальный ключ атрибута
	ValueType type = 2; // тип атрибута, см. ValueType
	bool is_multi_value = 3; // флаг означающий 1 или n значений будет в values
	repeated string values = 4; // значения атрибута
}

/**
 * Описание товара
 */
message Product {
	int64 sku = 1; // идентификатор описания товара
	string name = 2; // название товара
	repeated string category_ids = 3; // товарные категории
	repeated AttributeValue attribute_values = 4; // значения атрибутов
	Status status = 5; // статус сущности
	string ab_group = 6; // ab группа
}

/**
 * Значение атрибута описания
 */
message AttributeValue {
	string attribute_key = 1; // ключ атрибута
	string value = 2; // значения атрибута
	string dictionary_value_id = 3; // ссылка на словарное значения если атрибут словарный
}

/**
 * Описательная категория
 */
message Category {
	string id = 1; // идентификатор категории
	string name = 2; // название категории
	string parent_id = 3; // родительский идентификатор категории
	repeated string retailer_ids = 4; // список идентификаторов ритейлеров
	repeated Data category_data = 5; // доп. описание категории, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
	repeated string tenant_ids = 6; // список площадок где используется данная категория
	Status status = 7; // статус сущности
}

/*
 * Атрибут описания
 */
message Attribute {
	string key = 1; // уникальный ключ атрибута описания
	string dictionary_key = 2; // уникальный ключ словаря (если атрибут словарный)
	string name = 3; // название атрибута
	ValueType type = 4; // тип атрибута, см. ValueType
	bool is_multi_value = 5; // флаг означающий 1 или n значений будет в values
	map<string, bool> flags = 6; // флаги атрибута, по ним можно фильтровать при запросе через display_attributes
	repeated Data attribute_data = 7; // доп. данные атрибута, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
}

/*
 * Словарь описания
 */
message Dictionary {
	string key = 1; // уникальный ключ словаря
	string name = 2; // название словаря
	ValueType type = 3; // тип словаря, см. ValueType
	repeated DictionaryValue values = 4; // значения словаря
	repeated Data dictionary_data = 5; // доп. данные словаря, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
}

/**
 * Словарное значени
 */
message DictionaryValue {
	message AdditionalDictionaryValue {
		string dictionary_key = 1; // идентификатор ссылающегося значения
		string dictionary_value_id = 2; // ключ словаря ссылающегося значения
	}
	string id = 1; // идентификатор словарного значения
	string value = 2; // значение
	repeated Data value_data = 3; // доп. данные значения, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
	repeated AdditionalDictionaryValue additional_dictionary_values = 4; // массив дополнительных значений (например на значение бренда будет ссылаться страна изготовления)
}

/**
 * Остатки товарного предложения
 */
message Stock {
	int64 sku = 1; // идентификатор описания
	string store_id = 2; // идентификатор магазина
	string retailer_id = 3; // идентификатор ритейлера
	string retailer_sku = 4; // идентификатор описания ритейлера
	double stock = 5; // кол-во остатка
	repeated Data stock_data = 6; // доп. данные остатков, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
	Status status = 7; // статус сущности
}

/**
 * Товарное предложение
 */
message Offer {
	int64 sku = 1; // идентификатор описания
	string retailer_id = 2; // идентификатор ритейлера
	string retailer_sku = 3; // идентификатор описания ритейлера
	Pricer pricer = 4; // тип цены товарного предложения
	repeated Data offer_data = 5; // доп. данные товарного предложения, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
	Status status = 6; // статус сущности
}

/**
 * Цена товарного предложения
 */
message Price {
	int64 sku = 1; // идентификатор описания
	string store_id = 2; // идентификатор магазина
	string tenant_id = 3; // идентификатор площадки
	string retailer_id = 4; // идентификатор ритейлера
	string retailer_sku = 5; // идентификатор описания ритейлера
	double price = 6; // оригинальная цена за единицу товара со всеми скидками
	repeated Data price_data = 7; // доп. данные цены, полный список data атрибутов описан здесь https://wiki.sbmt.io/display/CP/Product+Hub
	Status status = 8; // статус сущности
}

/**
 * Ключи атрибутов которые необходимо вывести в фасетах фильтров.
 */
message CategoryFilters {
	string category_id = 1; // идентификатор категории
	repeated string attribute_keys = 2; // список ключей атрибутов
}

/**
 * Список идентификаторов магазинов у ритейлера
 */
message RetailerStores {
	string retailer_id = 1; // идентификатор ритейлера
	repeated string store_ids = 2; // идентификаторы магазинов ритейлера
}

/**
 * Группа sku которые можно добавить в заказ
 * Пример: Комплексный обед
 */
message Group {
	int64 id = 1; // идентификатор группы
	int64 retailer_id = 2; // идентификатор ритейлера
	string retailer_sku = 3; // идентификатор sku
	string name = 4; // название
	repeated GroupItem items = 5;
	int64 sort = 6; // сортировка
	Status status = 7; // статус
	int64 min = 8; // минимальное количество, которое нужно выбрать
	int64 max = 9; // максимальное количество, которое нужно выбрать
	repeated Data group_data = 10; // доп. данные: original_id
}

/**
 * Одна sku из группы Group
 * Пример: суп, салат, компот
 */
message GroupItem {
	string retailer_sku = 1; // идентификатор sku
	bool is_default = 2;  // выбран товар по умолчанию
}

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                    Request && Response
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

message SaveProductsRequest {
	repeated Product products = 1;
}

message SaveProductsResponse {
	int64 save_products_count = 1;
}

message SaveOffersRequest {
	repeated Offer offers = 1;
}

message SaveOffersResponse {
	int64 save_offers_count = 1;
}

message SaveStocksRequest {
	repeated Stock stocks = 1;
}

message SaveStocksResponse {
	int64 save_stocks_count = 1;
}

message SavePricesRequest {
	repeated Price prices = 1;
}

message SavePricesResponse {
	int64 save_prices_count = 1;
}

message SaveCategoriesRequest {
	repeated Category categories = 1;
}

message SaveCategoriesResponse {
	int64 save_categories_count = 1;
}

message SaveAttributesRequest {
	repeated Attribute attributes = 1;
}

message SaveAttributesResponse {
	int64 save_attributes_count = 1;
}

message SaveDictionariesRequest {
	repeated Dictionary dictionaries = 1;
}

message SaveDictionariesResponse {
	int64 save_dictionaries_count = 1;
}

message SaveCategoryFiltersRequest {
	repeated CategoryFilters category_filters = 1;
}

message SaveCategoryFiltersResponse {
	int64 save_category_filters_count = 1;
}

/*
 * RetailerStore - идентификатор магазина у ритейлера
 */
message RetailerStore{
	string store_id = 1; // идентификатор магазина ритейлера
	string retailer_id = 2; // идентификатор ритейлера
}

message SaveStoreIDtoRetailerIDRequest {
	repeated RetailerStore retailer_stores = 1;
}

message SaveGroupsRequest {
	repeated Group groups = 1;
}

message SaveGroupsResponse {
	int64 group_count = 1;
}

message SaveStoreIDtoRetailerIDResponse{
	int64 retailer_count = 1;
	int64 store_count = 2;
}

message SaveRetailerStoresResponse {
	int64 retailer_count = 1;
	int64 store_count = 2;
}

message SaveRetailerStoresRequest {
	repeated RetailerStores retailer_stores = 1;
}

message SavePopularitiesRequest {
	message Popularity {
		string store_id = 1;
		int64 sku = 2;
		int64 popularity = 3;
	}
	repeated Popularity popularities = 1;
}

message SavePopularitiesResponse {
	int64 save_popularities_count = 1;
}

message DisableOffersRequest {
	message Offer {
		string retailer_id = 1;
		string retailer_sku = 2;
	}
	repeated Offer offers = 1;
}

message DisableOffersResponse {
	int64 disable_offers_count = 1;
}
