syntax = "proto3";

package product_hub_front_meta;

option go_package = "gitlab.sbermarket.tech/paas/content/product-hub/pkg/server/grpc/product-hub-front-meta";

/**
 * slack:
 *    #product-hub
 *
 * swagger:
 *     https://paas-content-product-hub.sbmt.io/api
 *
 * public prod grpc uri:
 *    paas-content-product-hub.sbmt.io:443
 *
 * public stg grpc uri:
 *    paas-content-product-hub.gw-stage.sbmt.io:443
 *
 * kuber prod grpc uri:
 *    base-product-hub.paas-content-product-hub:3009
 *
 * description:
 *    Мета сервис product-hub возвращающий мета данные (Category, Attribute, Dictionary, DictionaryValue).
 *    Предназначет для real-time нагрузки.
 */
service ProductHubFrontMeta {
  /**
   * Возвращает плоский список всех категорий батчами (без спецпредложений).
   *
   * Обязательные параметры:
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть все категории:
   *        grpcurl -d '{"limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllCategories
   */
  rpc GetAllCategories(GetAllCategoriesRequest) returns (GetAllCategoriesResponse);

  /**
   * Возвращает плоский список всех категорий со списком идентификаторов магазинов батчами (без спецпредложений).
   *
   * Обязательные параметры:
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть все категории:
   *        grpcurl -d '{"limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllCategoriesWithStores
   */
  rpc GetAllCategoriesWithStores(GetAllCategoriesWithStoresRequest) returns (GetAllCategoriesWithStoresResponse);

  /**
   * Возвращает экземпляры категорий по идентификаторам.
   *
   * Обязательные параметры:
   *    category_ids - идентификатор категории
   *
   * Примеры:
   *    Вернуть категории по ид:
   *        grpcurl -d '{"category_ids": ["175", "5440"]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetCategoriesByCategoryIDs
   */
  rpc GetCategoriesByCategoryIDs(GetCategoriesByCategoryIDsRequest) returns (GetCategoriesByCategoryIDsResponse);

  /**
   * Возвращает список ключей атрибутов которые необходимо вывести в фасетах фильтров.
   *
   * Обязательные параметры:
   *    category_ids - идентификатор категории
   *
   * Примеры:
   *    Вернуть ключи атрибутов по ид категорий:
   *        grpcurl -d '{"category_ids": ["175", "5440"]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetCategoryFiltersByCategoryIDs
   */
  rpc GetCategoryFiltersByCategoryIDs(GetCategoryFiltersByCategoryIDsRequest) returns (GetCategoryFiltersByCategoryIDsResponse);

  /**
   * Возвращает экземпляры атрибутов по ключам.
   *
   * Обязательные параметры:
   *    attribute_keys - ключи атрибутов
   *
   * Примеры:
   *    Вернуть экземпляры атрибутов:
   *        grpcurl -d '{"attribute_keys": ["brand", "image"]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAttributesByKeys
   */
  rpc GetAttributesByKeys(GetAttributesByKeysRequest) returns (GetAttributesByKeysResponse);

  /**
   * Возвращает список всех атрибутов.
   *
   * Обязательные параметры:
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть все атрибуты:
   *        grpcurl -d '{"limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllAttributes
   */
  rpc GetAllAttributes(GetAllAttributesRequest) returns (GetAllAttributesResponse);

  /**
   * Возвращает список всех словарей.
   *
   * Обязательные параметры:
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть все словари:
   *        grpcurl -d '{"limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllDictionaries
   */
  rpc GetAllDictionaries(GetAllDictionariesRequest) returns (GetAllDictionariesResponse);

  /**
   * Возвращает экземпляры словарей по ключам.
   *
   * Обязательные параметры:
   *    dictionary_keys - ключи словарей
   *
   * Примеры:
   *    Вернуть экземпляры словарей:
   *        grpcurl -d '{"dictionary_keys": ["brand"]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetDictionariesByKeys
   */
  rpc GetDictionariesByKeys(GetDictionariesByKeysRequest) returns (GetDictionariesByKeysResponse);

  /**
   * Возвращает все словарные значения конкретного словаря.
   *
   * Обязательные параметры:
   *    dictionary_key - ключ словаря
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть значения словарей:
   *        grpcurl -d '{"dictionary_key": "brand", "limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllDictionaryValues
   */
  rpc GetAllDictionaryValues(GetAllDictionaryValuesRequest) returns (GetAllDictionaryValuesResponse);

  /**
   * Возвращает полный список монолитовских категорий (табличка mysql.taxons).
   *
   * Обязательные параметры:
   *    limit - кол-во запрашиваемых элементов
   *    offset - сдвиг, начинать с 0
   *
   * Примеры:
   *    Вернуть монолитовские категории:
   *        grpcurl -d '{"limit": 10, "offset": 0}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetAllOriginalCategories
   */
  rpc GetAllOriginalCategories(GetAllOriginalCategoriesRequest) returns (GetAllOriginalCategoriesResponse);

  /**
   * Возвращает список идентификаторов магазинов для конкретных ритейлеров.
   *
   * Обязательные параметры:
   *    retailer_ids - идентификаторы ритейлеров
   *
   * Примеры:
   *    Вернуть идентификаторы магазины:
   *        grpcurl -d '{"retailer_ids": ["1", "3"]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetRetailerStores
   */
  rpc GetRetailerStores(GetRetailerStoresRequest) returns (GetRetailerStoresResponse);

  /**
   * Возвращает список словарных значений по ключу атрибута и идентифиатору словарного значения
   *
   * Обязательные параметры:
   *    attribute_key - ключ атрибута
   *    dictionary_value_ids - идентификаторы словарных значений
   *
   * Примеры:
   *    Вернуть словарные значения:
   *        grpcurl -d '{"attributes": [{"attribute_key": "brand", "dictionary_value_ids": ["48739", "30248"]}]}' paas-content-product-hub.sbmt.io:443 product_hub_front_meta.ProductHubFrontMeta.GetDictionaryAttributesValues
   */
  rpc GetDictionaryAttributesValues(GetDictionaryAttributesValuesRequest) returns (GetDictionaryAttributesValuesResponse);
}

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                    Основные сущности
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

/**
 * Тип атрибута (message Attribute) или data атрибута (message Data)
 */
enum ValueType {
  STRING = 0; // строка
  INTEGER = 1; // число
  DOUBLE = 2; // число с точкой
  BOOL = 3; // флаг
  DATETIME = 4; // время в формате ISO-8601 (YYYY-MM-DDThh:mm:ss)
  IMAGE = 5; // uri на картинку в s3
}

/**
 * Статус любой сущности
 */
enum Status {
  DISABLE = 0; // сущность не активна
  ENABLE = 1; // сущность активна
  DELETED = 2; // сущность удалена из других систем (в product-hub сущности не удаляются)
}

/**
 * Дата атрибут.
 * Используется для описания атрибутов сущностей Attribute, Dictionary, DictionaryValue
 */
message Data {
  string key = 1; // уникальный ключ атрибута
  ValueType type = 2; // тип атрибута, см. ValueType
  bool is_multi_value = 3; // флаг означающий 1 или n значений будет в values
  repeated string values = 4; // значения атрибута
}

/**
 * Товарная категория
 */
message Category {
  string id = 1; // идентификатор категории ПИМС
  string name = 2; // название категории
  string parent_id = 3; // родительский идентификатор категории
  repeated string retailer_ids = 4; // список идентификаторов ритейлеров где используется данная категория
  repeated Data category_data = 5; // доп. описание категории, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
  repeated string tenant_ids = 6; // список площадок где используется данная категория
  Status status = 7; // статус сущности
  string updated_at = 8; // последнее время обновление сущности в product-hub
}

/**
 * Товарная категория с идентификаторами магазинов
 */
message CategoryWithStores {
  string id = 1; // идентификатор категории ПИМС
  string name = 2; // название категории
  string parent_id = 3; // родительский идентификатор категории
  repeated RetailerStores stores = 4; // список идентификаторов ритейлеров и магазинов где используется данная категория
  repeated Data category_data = 5; // доп. описание категории, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
  repeated string tenant_ids = 6; // список площадок где используется данная категория
  Status status = 7; // статус сущности
  string updated_at = 8; // последнее время обновление сущности в product-hub
}

/**
 * Список идентификаторов магазинов у ритейлера
 */
message RetailerStores {
  string retailer_id = 1; // идентификатор ритейлера
  repeated string store_ids = 2; // идентификаторы магазинов ритейлера
}

/**
 * Ключи атрибутов которые необходимо вывести в фасетах фильтров.
 */
message CategoryFilter {
  string category_id = 1; // идентификатор категории
  repeated string attribute_keys = 2; // список ключей атрибутов
  string updated_at = 3; // последнее время обновление сущности в product-hub
}

/**
 * Атрибут описания
 */
message Attribute {
  string key = 1; // уникальный ключ атрибута описания
  string dictionary_key = 2; // уникальный ключ словаря (если атрибут словарный)
  string name = 3; // название атрибута
  ValueType type = 4; // тип атрибута, см. ValueType
  bool is_multi_value = 5; // флаг означающий 1 или n значений будет в values
  map<string, bool> flags = 6; // флаги атрибута, по ним можно фильтровать при запросе через display_attributes
  repeated Data attribute_data = 7; // доп. данные атрибута, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
  string updated_at = 8; // последнее время обновление сущности в product-hub
}

/**
 * Словарь описания
 */
message Dictionary {
  string key = 1; // уникальный ключ словаря
  string name = 2; // название словаря
  ValueType type = 3; // тип словаря, см. ValueType
  string updated_at = 4; // последнее время обновление сущности в product-hub
  repeated Data dictionary_data = 5; // доп. данные словаря, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
}

/**
 * Словарное значение
 */
message DictionaryValue {
  string id = 1; // идентификатор словарного значения
  string value = 2; // значение
  repeated Data value_data = 3; // доп. данные значения, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
  string updated_at = 4; // последнее время обновление сущности в product-hub
  repeated AdditionalDictionaryValue additional_dictionary_values = 5; // массив дополнительных значений (например на значение бренда будет ссылаться страна изготовления)
}

/**
 * Дополнительные значения
 */
message AdditionalDictionaryValue {
  string id = 1; // идентификатор ссылающегося значения
  string dictionary_key = 2; // ключ словаря ссылающегося значения
  string value = 3; // значени
  repeated Data value_data = 4; // доп. данные значения, полный список data атрибутов описан здесь https://instamart.atlassian.net/wiki/spaces/CP/pages/2951120403/product-hub
}

/**
 * Монолитовская (mysql.taxons) категория
 */
message OriginalCategory{
  int64 id = 1; // mysql идентификатор
  int64 original_id = 2; // ссылка на оригинальную категорию если текущая является копией (то есть текущая категория это спец. предложение)
  int64 instamart_id = 3; // идентификатор ПИМС (а так же product-hub) категории
  string permalink = 4; //
  int64 parent_id = 5; // идентификатор родителя
  bool published = 6; // статус активности
  bool is_promoted = 7; // флаг категории спец. предложений
}

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *                    Request && Response
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

message GetAllCategoriesRequest{
  int64 limit = 1;
  int64 offset = 2;
}

message GetAllCategoriesResponse {
  repeated Category categories = 1;
}

message GetAllCategoriesWithStoresRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message GetAllCategoriesWithStoresResponse {
  repeated CategoryWithStores categories = 1;
}

message GetCategoriesByCategoryIDsRequest {
  repeated string category_ids = 1;
}

message GetCategoriesByCategoryIDsResponse {
  repeated Category categories = 1;
}

message GetCategoryFiltersByCategoryIDsRequest {
  repeated string category_ids = 1;
}

message GetCategoryFiltersByCategoryIDsResponse {
  repeated CategoryFilter CategoryFilters = 1;
}

message GetAttributesByKeysRequest {
  repeated string attribute_keys = 1;
}

message GetAttributesByKeysResponse {
  repeated Attribute attributes = 1;
}

message GetAllAttributesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message GetAllAttributesResponse {
  repeated Attribute attributes = 1;
}

message GetAllDictionariesRequest {
  int64 limit = 1;
  int64 offset = 2;
}

message GetAllDictionariesResponse {
  repeated Dictionary dictionaries = 1;
}

message GetDictionariesByKeysRequest {
  repeated string dictionary_keys = 1;
}

message GetDictionariesByKeysResponse {
  repeated Dictionary dictionaries = 1;
}

message GetAllDictionaryValuesRequest {
  string dictionary_key = 1;
  int64 limit = 2;
  int64 offset = 3;
}

message GetAllDictionaryValuesResponse {
  repeated DictionaryValue dictionary_values = 1;
}

message GetAllOriginalCategoriesRequest {
  int64 limit = 2;
  int64 offset = 3;
}

message GetAllOriginalCategoriesResponse {
  repeated OriginalCategory original_categories = 1;
}

message GetRetailerStoresRequest {
  repeated string retailer_ids = 1;
}

message GetRetailerStoresResponse {
  repeated RetailerStores retailer_stores = 1;
}

message GetDictionaryAttributesValuesRequest {
  repeated DictionaryAttributeValuesRequest attributes = 1;
}

message GetDictionaryAttributesValuesResponse {
  repeated DictionaryAttributesValuesResponse attributes = 1;
}

message DictionaryAttributeValuesRequest {
  string attribute_key = 1;
  repeated string dictionary_value_ids = 2;
}

message DictionaryAttributesValuesResponse {
  message DictionaryValue{
    string id = 1;
    string value = 2;
    repeated Data value_data = 3;
  }

  string attribute_key = 1;
  string attribute_name = 2;
  string dictionary_key = 3;
  repeated DictionaryValue dictionary_value  = 4;
}