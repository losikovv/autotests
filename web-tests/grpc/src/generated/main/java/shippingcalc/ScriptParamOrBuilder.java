// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: on_demand/shippingcalc.proto

package shippingcalc;

public interface ScriptParamOrBuilder extends
    // @@protoc_insertion_point(interface_extends:shippingcalc.ScriptParam)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Тип параметра
   * </pre>
   *
   * <code>.shippingcalc.ScriptParam.ScriptParamType type = 1;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Тип параметра
   * </pre>
   *
   * <code>.shippingcalc.ScriptParam.ScriptParamType type = 1;</code>
   * @return The type.
   */
  shippingcalc.ScriptParam.ScriptParamType getType();

  /**
   * <pre>
   * Имя параметра
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Имя параметра
   * </pre>
   *
   * <code>string name = 2;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Подпись
   * </pre>
   *
   * <code>string caption = 3;</code>
   * @return The caption.
   */
  java.lang.String getCaption();
  /**
   * <pre>
   * Подпись
   * </pre>
   *
   * <code>string caption = 3;</code>
   * @return The bytes for caption.
   */
  com.google.protobuf.ByteString
      getCaptionBytes();

  /**
   * <pre>
   * Отношение единиц, в которых значение отображается клиенту, к единицам, в которых нам передаётся значение.
   * Например, если в подписи указано "в рублях" и в админке поле ввода в рублях, то мы хотим получать копейки,
   * а Fraction будет равен 100 (столько, сколько копеек в рублях). 
   * </pre>
   *
   * <code>uint64 fraction = 4;</code>
   * @return The fraction.
   */
  long getFraction();
}
