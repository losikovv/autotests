// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: on_demand/shippingcalc.proto

package shippingcalc;

public interface PricedShipmentOrBuilder extends
    // @@protoc_insertion_point(interface_extends:shippingcalc.PricedShipment)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Идентификатор отгрузки
   * </pre>
   *
   * <code>string shipment_id = 1;</code>
   * @return The shipmentId.
   */
  java.lang.String getShipmentId();
  /**
   * <pre>
   * Идентификатор отгрузки
   * </pre>
   *
   * <code>string shipment_id = 1;</code>
   * @return The bytes for shipmentId.
   */
  com.google.protobuf.ByteString
      getShipmentIdBytes();

  /**
   * <pre>
   * Цена отгрузки в копейках
   * </pre>
   *
   * <code>uint64 shipping_price = 2;</code>
   * @return The shippingPrice.
   */
  long getShippingPrice();

  /**
   * <pre>
   * Timestamp момента времени, когда оффер перестаёт быть действительным
   * </pre>
   *
   * <code>int64 offer_expires_at = 3;</code>
   * @return The offerExpiresAt.
   */
  long getOfferExpiresAt();

  /**
   * <pre>
   * Хеш применённого оффера для аналитики
   * </pre>
   *
   * <code>string offer_hash = 4;</code>
   * @return The offerHash.
   */
  java.lang.String getOfferHash();
  /**
   * <pre>
   * Хеш применённого оффера для аналитики
   * </pre>
   *
   * <code>string offer_hash = 4;</code>
   * @return The bytes for offerHash.
   */
  com.google.protobuf.ByteString
      getOfferHashBytes();

  /**
   * <pre>
   * Ценовая лесенка
   * </pre>
   *
   * <code>repeated .shippingcalc.LadderStep ladder = 5;</code>
   */
  java.util.List<shippingcalc.LadderStep> 
      getLadderList();
  /**
   * <pre>
   * Ценовая лесенка
   * </pre>
   *
   * <code>repeated .shippingcalc.LadderStep ladder = 5;</code>
   */
  shippingcalc.LadderStep getLadder(int index);
  /**
   * <pre>
   * Ценовая лесенка
   * </pre>
   *
   * <code>repeated .shippingcalc.LadderStep ladder = 5;</code>
   */
  int getLadderCount();
  /**
   * <pre>
   * Ценовая лесенка
   * </pre>
   *
   * <code>repeated .shippingcalc.LadderStep ladder = 5;</code>
   */
  java.util.List<? extends shippingcalc.LadderStepOrBuilder> 
      getLadderOrBuilderList();
  /**
   * <pre>
   * Ценовая лесенка
   * </pre>
   *
   * <code>repeated .shippingcalc.LadderStep ladder = 5;</code>
   */
  shippingcalc.LadderStepOrBuilder getLadderOrBuilder(
      int index);

  /**
   * <pre>
   * Идентификатор стратегии, примененной при расчете цены
   * </pre>
   *
   * <code>uint32 strategy_id = 6;</code>
   * @return The strategyId.
   */
  int getStrategyId();

  /**
   * <pre>
   * Идентификатор правила, примененного при расчете цены
   * </pre>
   *
   * <code>uint32 rule_id = 7;</code>
   * @return The ruleId.
   */
  int getRuleId();

  /**
   * <pre>
   * true, если цена была определена существующим offer'ом. false, если цена свежепосчитанная
   * </pre>
   *
   * <code>bool we_had_offer = 8;</code>
   * @return The weHadOffer.
   */
  boolean getWeHadOffer();

  /**
   * <pre>
   * Надбавка к цене при высоком спросе в копейках
   * </pre>
   *
   * <code>uint64 surge_level_addition = 9;</code>
   * @return The surgeLevelAddition.
   */
  long getSurgeLevelAddition();

  /**
   * <pre>
   * флаг что использовалась надбавка к цене
   * </pre>
   *
   * <code>bool surge_used = 10;</code>
   * @return The surgeUsed.
   */
  boolean getSurgeUsed();

  /**
   * <pre>
   * Уровень от сервиса surgelevel
   * </pre>
   *
   * <code>float surge_level = 11;</code>
   * @return The surgeLevel.
   */
  float getSurgeLevel();

  /**
   * <pre>
   * Примененная наценка слота в копейках
   * </pre>
   *
   * <code>uint64 surge_delivery_window_addition = 12;</code>
   * @return The surgeDeliveryWindowAddition.
   */
  long getSurgeDeliveryWindowAddition();

  /**
   * <pre>
   * Подсказки о том, что может повлиять на цену. Например, сколько составляет надбавка за вес.
   * </pre>
   *
   * <code>repeated .shippingcalc.PriceHint hints = 13;</code>
   */
  java.util.List<shippingcalc.PriceHint> 
      getHintsList();
  /**
   * <pre>
   * Подсказки о том, что может повлиять на цену. Например, сколько составляет надбавка за вес.
   * </pre>
   *
   * <code>repeated .shippingcalc.PriceHint hints = 13;</code>
   */
  shippingcalc.PriceHint getHints(int index);
  /**
   * <pre>
   * Подсказки о том, что может повлиять на цену. Например, сколько составляет надбавка за вес.
   * </pre>
   *
   * <code>repeated .shippingcalc.PriceHint hints = 13;</code>
   */
  int getHintsCount();
  /**
   * <pre>
   * Подсказки о том, что может повлиять на цену. Например, сколько составляет надбавка за вес.
   * </pre>
   *
   * <code>repeated .shippingcalc.PriceHint hints = 13;</code>
   */
  java.util.List<? extends shippingcalc.PriceHintOrBuilder> 
      getHintsOrBuilderList();
  /**
   * <pre>
   * Подсказки о том, что может повлиять на цену. Например, сколько составляет надбавка за вес.
   * </pre>
   *
   * <code>repeated .shippingcalc.PriceHint hints = 13;</code>
   */
  shippingcalc.PriceHintOrBuilder getHintsOrBuilder(
      int index);

  /**
   * <pre>
   * Объяснение того почему цена именно такая
   * </pre>
   *
   * <code>.shippingcalc.PriceExplanation price_explanation = 14;</code>
   * @return Whether the priceExplanation field is set.
   */
  boolean hasPriceExplanation();
  /**
   * <pre>
   * Объяснение того почему цена именно такая
   * </pre>
   *
   * <code>.shippingcalc.PriceExplanation price_explanation = 14;</code>
   * @return The priceExplanation.
   */
  shippingcalc.PriceExplanation getPriceExplanation();
  /**
   * <pre>
   * Объяснение того почему цена именно такая
   * </pre>
   *
   * <code>.shippingcalc.PriceExplanation price_explanation = 14;</code>
   */
  shippingcalc.PriceExplanationOrBuilder getPriceExplanationOrBuilder();

  /**
   * <pre>
   * Минимальная цена корзины
   * </pre>
   *
   * <code>uint64 minimal_cart_price = 15;</code>
   * @return The minimalCartPrice.
   */
  long getMinimalCartPrice();
}
