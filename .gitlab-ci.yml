include:
  - local: '/.gitlab-ci/api.yaml'
  - local: '/.gitlab-ci/shopper.yaml'
  - local: '/.gitlab-ci/grpc.yaml'
  - local: '/.gitlab-ci/ui.yaml'
  - local: '/.gitlab-ci/ui-tenant.yaml'
  - local: '/.gitlab-ci/kafka.yaml'
  - local: '/.gitlab-ci/on-demand.yaml'

image: ${JDK11_GRADLE_IMAGE}

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - web-tests/.gradle

variables:
  JDK_GRADLE: 'gradle:7-jdk11'
  JDK11_GRADLE_VERSION: 'latest'
  JDK11_GRADLE_IMAGE: "${CI_REGISTRY}/qa/automag/java:${JDK11_GRADLE_VERSION}"
  RUNNER_IMAGE_REPO: "dreg.sbmt.io/library"
  RUNNER_IMAGE_NAME: "ci-tools"
  RUNNER_IMAGE_TAG: "v1.4.5"
  RUNNER_IMAGE_URL: "${RUNNER_IMAGE_REPO}/${RUNNER_IMAGE_NAME}:${RUNNER_IMAGE_TAG}"
  GIT_SUBMODULE_STRATEGY: none
  GIT_DEPTH: 10
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  CI_RUN_ALL_JOBS: "true"
  URL_STF_FRONT:
    value: "https://user:password@next-default.k-stage.sbermarket.tech/"
    description: "ОБЯЗАТЕЛЬНО ДЛЯ UI ЗАПУСКА! Нужно указывать полный url фронта, вместе с basic auth"
  STF_FORWARD:
    value: "s-sb-stfkraken-sbermarket"
    description: "ОБЯЗАТЕЛЬНО ДЛЯ UI ЗАПУСКА! Связь фронта с бекендом"
  URL_B2B_FRONT:
    value: "https://user:password@next-default-smbusiness.k-stage.sbermarket.tech/"
    description: "ОБЯЗАТЕЛЬНО ДЛЯ UI ЗАПУСКА! Нужно указывать полный url фронта, вместе с basic auth"
  B2B_FORWARD:
    value: "s-sb-stfkraken-smbusiness"
    description: "ОБЯЗАТЕЛЬНО ДЛЯ UI ЗАПУСКА! Связь фронта с бекендом"
  URL_STF_BACKEND:
    value: "stf-kraken.k-stage.sbermarket.tech" # this would be the default value
    description: "ОБЯЗАТЕЛЬНО!!! Имя stf стейджа на котором запускаем тесты"
  URL_SHP:
    description: "Имя shp стейджа на котором запускаем тесты. Для номерных стейджей можно пропустить"
  CI_MODULE:
    description: "Например: ui  -Возможные варианты: ui/api/grpc/kafka/"
  CI_GROUP:
    description: "Например: all-cart Возможные варианты: all-cart/all-order/api-instamart-smoke/api-instamart-regress"

before_script:
  - export GRADLE_USER_HOME=$(pwd)/web-tests/.gradle
  - cd web-tests

stages:
  - build
  - tests-api
  - tests-api-ui
  - generate-report
  - tests-ui
  - tests-ui-tenant
  - custom-run

.template_only_branches:
  only:
    refs:
      - branches
  except:
    refs:
      - master
      - schedules
  when: manual

.template_prod:
  only:
    refs:
      - master
      - schedules
    variables:
      - $PRODUCTION == 'true'
  when: always

.template_schedule:
  only:
    refs:
      - schedules
    variables:
      - $REGRESSION == 'true'
  when: always

.template_run_all_jobs_at_a_time_on_master:
  only:
    refs:
      - master
    variables:
      - $CI_RUN_ALL_JOBS == 'true'
  except:
    refs:
      - schedules
      - web
      - pushes

.template_api_tests:
  stage: tests-api
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/api/build/allure-results/
      - web-tests/api/logs/
      - web-tests/api/build/reports/tests/
      - web-tests/api/swagger-coverage-output
      - web-tests/api/build/report.html
    expire_in: 1 week
  allow_failure: false

.template_api_ui_tests:
  stage: tests-api-ui
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/api/build/allure-results/
      - web-tests/api/logs/
      - web-tests/api/build/reports/tests/
      - web-tests/api/swagger-coverage-output
      - web-tests/api/build/report.html
    expire_in: 1 week
  allow_failure: false

.template_grpc_tests:
  stage: tests-api
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/grpc/build/allure-results/
      - web-tests/grpc/logs/
      - web-tests/grpc/build/reports/tests/
    expire_in: 1 week
  allow_failure: false

.template_dispatch_tests:
  stage: tests-api
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/kafka/build/allure-results/
      - web-tests/kafka/logs/
      - web-tests/kafka/build/reports/tests/
    expire_in: 1 week
  allow_failure: false

.template_ui_tests:
  resource_group: ui:$CI_COMMIT_REF_SLUG
  stage: tests-ui
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/reforged/build/allure-results/
      - web-tests/reforged/logs/
      - web-tests/reforged/build/reports/tests/
    expire_in: 1 week
  allow_failure: false

java_gradle:build:
  extends: ".template_only_branches"
  stage: build
  image: ${RUNNER_IMAGE_URL}
  tags:
    - stage-static
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker pull ${JDK_GRADLE}
    - docker tag ${JDK_GRADLE} ${JDK11_GRADLE_IMAGE}
    - docker push ${JDK11_GRADLE_IMAGE}

tests:customRun:
  only:
    - web
  except:
    - schedules
    - merge_request
  resource_group: customRun
  stage: custom-run
  script:
    - echo $P_ENV
    - echo $CI_PIPELINE_URL
    - echo $URL_STF_BACKEND
    - echo $URL_STF_FRONT
    - echo $STF_FORWARD
    - echo $URL_B2B_FRONT
    - echo $B2B_FORWARD
    - echo $URL_SHP
    - gradle --continue clean build ciRun copyAllAllureHistory -Penv=$P_ENV -Pqase=false -Pkey=$ATST_APP_SECRET_KEY -Ppip_url=$CI_PIPELINE_URL -Purl_stf=$URL_STF_BACKEND -Purl_stf_front=$URL_STF_FRONT -Pstf_forward=$STF_FORWARD -Purl_b2b_front=$URL_B2B_FRONT -Pb2b_forward=$B2B_FORWARD -Purl_shp=$URL_SHP
  after_script:
    - bash ./report.sh . custom-run
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/build/allure-results/
    expire_in: 1 week
  allow_failure: true

tests:AutoMRCheck:
  only:
    - merge_requests
  stage: tests-api
  script:
    - echo $P_ENV
    - gradle --continue clean build :api:autoMr :reforged:autoMr allureCopyHistoryDir -Penv=$P_ENV -Pqase=false -Pkey=$ATST_APP_SECRET_KEY -Ppip_url=$CI_PIPELINE_URL
  after_script:
    - bash ./report.sh . default
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/api/build/allure-results/
      - web-tests/api/logs/
      - web-tests/api/build/reports/tests/
      - web-tests/reforged/build/allure-results/
      - web-tests/reforged/logs/
      - web-tests/reforged/build/reports/tests/
    expire_in: 1 week
  allow_failure: true

tests:Debug:UI:
  extends: ".template_only_branches"
  stage: tests-api
  script:
    - echo $P_ENV
    - gradle clean build :reforged:debug -Penv=$P_ENV -Pqase=false -Pkey=$ATST_APP_SECRET_KEY -Ppip_url=$CI_PIPELINE_URL
  after_script:
    - bash ./report.sh reforged debug
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/reforged/build/allure-results/
      - web-tests/reforged/build/reports/
      - web-tests/reforged/logs/
    expire_in: 1 week

tests:Debug:API:
  extends: ".template_only_branches"
  stage: tests-api
  script:
    - echo $P_ENV
    - gradle clean build :api:debug -Penv=$P_ENV -Pqase=false -Pkey=$ATST_APP_SECRET_KEY -Ppip_url=$CI_PIPELINE_URL
  after_script:
    - bash ./report.sh api debug
  tags:
    - k8s-stage
  artifacts:
    when: always
    paths:
      - web-tests/api/build/allure-results/
      - web-tests/api/build/reports/
      - web-tests/api/logs/
    expire_in: 1 week

qase:actualize:
  only:
    refs:
      - schedules
    variables:
      - $ACTUALIZATION == 'true'
  stage: tests-api
  script:
    - gradle clean build qaseActualize -Pkey=$ATST_APP_SECRET_KEY
  tags:
    - k8s-stage
  allow_failure: true

qase:cleanup:
  only:
    refs:
      - schedules
    variables:
      - $CLEANUP == 'true'
  stage: tests-api
  script:
    - gradle clean build qaseCleanup -Pkey=$ATST_APP_SECRET_KEY
  tags:
    - k8s-stage
  allow_failure: true

generate:data:
  only:
    refs:
      - schedules
    variables:
      - $GENERATE_DATA == 'true'
  stage: tests-api
  script:
    - gradle clean build generateData -Pkey=$ATST_APP_SECRET_KEY
  tags:
    - k8s-stage
  allow_failure: true

generate:dataUI:
  only:
    refs:
      - schedules
    variables:
      - $GENERATE_DATA_UI == 'true'
  stage: tests-api
  script:
    - gradle clean build generateDataUI -Pkey=$ATST_APP_SECRET_KEY
  tags:
    - k8s-stage
  allow_failure: true

generate:report:
  extends:
    - ".template_api_tests"
  only:
    variables:
      - $REGRESSION == 'true'
  stage: generate-report
  script:
    - if [ $URL_STF == "stf-kraken.k-stage.sbermarket.tech" ]; then ALLURE_POSTFIX="preprod"; else ALLURE_POSTFIX="staging"; fi
    - cd ..
    - bash ./generate-report.sh api api-instamart-$ALLURE_POSTFIX-regress
  when: always
